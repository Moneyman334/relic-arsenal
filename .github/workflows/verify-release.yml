---
name: Verify Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to verify (e.g., v1.0.0)'
        required: true
        type: string
      release_url:
        description: 'GitHub release URL (optional)'
        required: false
        type: string
        default: ''
      publish_issue:
        description: 'Create GitHub issue with QA Blessing'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  issues: write

jobs:
  verify-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          mkdir -p out
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV

      - name: Run release verifier
        id: verify
        run: |
          chmod +x scripts/release_verifier.sh
          ./scripts/release_verifier.sh "${{ inputs.tag }}" \
            "${{ inputs.release_url }}"
        env:
          GITHUB_OUTPUT: ${{ github.output }}

      - name: Upload QA Blessing artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: qa-blessing-${{ inputs.tag }}
          path: out/QA_Blessing_${{ inputs.tag }}.md
          retention-days: 30

      - name: Display blessing status
        run: |
          echo "## 🌟 QA Blessing Status" >> $GITHUB_STEP_SUMMARY
          if [[ -f "out/QA_Blessing_${{ inputs.tag }}.md" ]]; then
            echo "✅ QA Blessing generated successfully" \
              >> $GITHUB_STEP_SUMMARY
            echo "📁 Artifact uploaded: qa-blessing-${{ inputs.tag }}" \
              >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### QA Blessing Preview:" >> $GITHUB_STEP_SUMMARY
            echo '```markdown' >> $GITHUB_STEP_SUMMARY
            head -n 20 "out/QA_Blessing_${{ inputs.tag }}.md" \
              >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ QA Blessing generation failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create GitHub issue with QA Blessing
        if: inputs.publish_issue && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const tag = '${{ inputs.tag }}';
            const blessingFile = `out/QA_Blessing_${tag}.md`;

            try {
              if (!fs.existsSync(blessingFile)) {
                console.log('QA Blessing file not found, skipping issue creation');
                return;
              }

              const blessingContent = fs.readFileSync(blessingFile, 'utf8');

              // Extract status from blessing content
              const statusMatch = blessingContent.match(
                /\*\*Overall Status:\*\* \*\*(.+?)\*\*/
              );
              const status = statusMatch ? statusMatch[1] : 'UNKNOWN';

              const issueTitle = `🌟 QA Blessing for Release ${tag}`;
              const issueBody = `## ChaosKey333 Release Verification Report

            This issue contains the automated QA Blessing for release \`${tag}\`.

            **Status:** ${status}
            **Generated:** ${new Date().toISOString()}
            **Workflow:** [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})

            ---

            ${blessingContent}

            ---

            *This issue was automatically generated by the Release Verification workflow.*
            *Artifact: \`qa-blessing-${tag}\`*`;

              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['qa-blessing', 'release-verification', status.toLowerCase()]
              });

              console.log(`Created issue #${issue.data.number}: ${issue.data.html_url}`);

              // Add comment with artifact info
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.data.number,
                body: `📦 **Artifact Information**

            - **Name:** \`qa-blessing-${tag}\`
            - **Download:** Available in the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) artifacts
            - **Retention:** 30 days
            - **File:** \`QA_Blessing_${tag}.md\`

            ⚡ *"Crown the Vault. Forge the Storm. Honor the Scrolls."* — ChaosKey333`
              });

            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }
